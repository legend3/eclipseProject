<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

<!--   1.加载db.properties数据库信息文件 -->
    <bean id="config" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="locations">
            <array>
                <value>classpath:db.properties</value>
            </array>
        </property>
        <property name="fileEncoding">
            <value>UTF-8</value>
        </property>
    </bean>

<!--   2.配置数据库信息(替代mybatis的配置文件conf.xml;(不由mybatis的配置文件conf.xml关联数据库了，而是交给spring配置文件关联))
        PropertyPlaceholderConfigurer起的作用就是将占位符指向的数据库配置信息放在dataSource的bean中.
        
        自动提交:增、删、改时dbcp帮会自动提交
 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="url" value="${url}"></property>
        <property name="driverClassName" value="${driver}"></property>
        <property name="username" value="${username}"></property>
        <property name="password" value="${password}"></property>
    </bean>
    
    <!-- 
    	1和2取代: Reader reader = Resources.getResourceAsReader("mybatisConf.xml");
    -->

<!-- 第一种方式生成mapper对象 
   <bean id="studentMapper" class="org.legend.springMybatis.dao.impl.studentDaoImpl">
   -->
<!--	
		前提：通过sqlSessionFactoryc创建SqlSession,从而能获取映射Mapper类接口方法操作数据库:
				0.我们把dao层充当Mapper类
				1.此处我们用bean生成sqlSessionFactory
		将spring配置的sqlSessionFactory对象交给mapper(原先定义的dao层)	-->
<!-- 
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
    </bean>
    -->
     
     
<!-- 第二种方式生成mapper对象
		1.通过MapperFactoryBean对象自动创建SqlSession、自动实现接口！
		2.缺点：每个bean只代表一个接口
 -->
 <!-- 
	<bean id="studentMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
		<property name="mapperInterface" value="org.legend.springMybatis.mapper.StudentMapper"></property>
	</bean>
	 -->
	
<!-- 第三种方式生成mapper对象
		1.通过MapperScannerConfigurer对象扫描mapper包(多个包用逗号隔开)
		2.创建SqlSession用到MapperScannerConfigurer的sqlSessionFactoryBeanName属性(String类型)
		3.批量产生Mapper对在SpringIOC中的 id值 默认就是  首字母小写接口名 (首字母小写的接口名=id值)
 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
		<property name="basePackage" value="org.legend.springMybatis.mapper"></property>
	</bean>	
	
	<!-- service层 -->
	<bean id="studentService" class="org.legend.springMybatis.service.impl.studentServiceImpl">
        <property name="studentMapper" ref="studentMapper"></property>
    </bean>
    
<!--    3.在SpringIoc容器中创建MyBatis的核心类SqlSessionFatory
			SqlSessionFactory是MyBatis的关键对象,它是个单个数据库映射关系经过编译后的内存镜像.
				SqlSessionFactory对象的实例可以通过SqlSessionFactoryBuilder对象类获得,
					而SqlSessionFactoryBuilder则可以从XML配置文件或一个预先定制的Configuration的实例构建出SqlSessionFactory的实例！！！
					每一个MyBatis的应用程序都以一个SqlSessionFactory对象的实例为核心.
						同时SqlSessionFactory也是线程安全的,SqlSessionFactory一旦被创建,应该在应用执行期间都存在.
							在应用运行期间不要重复创建多次,建议使用单例模式.SqlSessionFactory是创建SqlSession的工厂.
    -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
		<!--  加载mybatis配置文件-->
        <property name="configLocation" value="classpath:conf.xml"></property>
        <!--  加载mapper配置文件(完全瓦解了mybatis配置文件！)  -->
        <property name="mapperLocations" value="org/legend/springMybatis/mapper/*.xml"></property>
    </bean>
     
</beans>
